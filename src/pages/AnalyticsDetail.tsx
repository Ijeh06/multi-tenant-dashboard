
import React from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { useTenant } from '../contexts/TenantContext';
import { ArrowLeft, Printer } from 'lucide-react';
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';

const AnalyticsDetail: React.FC = () => {
  const { metric } = useParams<{ metric: string }>();
  const navigate = useNavigate();
  const { currentTenant, currentUser, analyticsData } = useTenant();

  if (!analyticsData || !metric) {
    return (
      <div className="flex-1 flex items-center justify-center">
        <div className="text-center">
          <p className="text-gray-500">Analytics data not available</p>
        </div>
      </div>
    );
  }

  const getMetricData = () => {
    switch (metric) {
      case 'revenue':
        return {
          title: 'Revenue Analytics',
          data: analyticsData.revenue,
          format: (value: number) => `$${value.toLocaleString()}`,
          color: '#10B981'
        };
      case 'users':
        return {
          title: 'Daily Active Users',
          data: analyticsData.dailyActiveUsers,
          format: (value: number) => value.toLocaleString(),
          color: '#3B82F6'
        };
      case 'engagement':
        return {
          title: 'User Engagement',
          data: analyticsData.engagement,
          format: (value: number) => `${value}%`,
          color: '#8B5CF6'
        };
      default:
        return null;
    }
  };

  const metricData = getMetricData();

  if (!metricData) {
    return (
      <div className="flex-1 flex items-center justify-center">
        <div className="text-center">
          <p className="text-gray-500">Metric not found</p>
        </div>
      </div>
    );
  }

  const handlePrint = () => {
    window.print();
  };

  return (
    <div className="flex-1 bg-gray-50 p-4 md:p-8 min-h-screen">
      <div className="max-w-6xl mx-auto">
        {/* Header */}
        <div className="mb-6 md:mb-8 flex flex-col sm:flex-row sm:items-center justify-between gap-4 no-print">
          <div className="flex items-center">
            <button
              onClick={() => navigate(-1)}
              className="flex items-center px-3 py-2 md:px-4 text-gray-600 hover:text-gray-800 transition-colors mr-2 md:mr-4"
            >
              <ArrowLeft className="h-4 w-4 mr-2" />
              <span className="hidden sm:inline">Back to Dashboard</span>
              <span className="sm:hidden">Back</span>
            </button>
            <h1 className="text-xl md:text-2xl font-bold text-gray-900">
              {metricData.title} - Detailed View
            </h1>
          </div>
        </div>

        {/* Print Header */}
        <div className="print-only mb-8">
          <h1 className="text-3xl font-bold text-gray-900 mb-2">{metricData.title} Report</h1>
          <p className="text-gray-600">Generated on {new Date().toLocaleDateString()}</p>
          <p className="text-gray-600">Organization: {currentTenant?.name}</p>
          <p className="text-gray-600">Generated by: {currentUser?.name}</p>
        </div>

        {/* Current Value Card */}
        <div className="bg-white rounded-lg shadow-sm p-6 md:p-8 border border-gray-200 mb-6 md:mb-8">
          <div className="text-center">
            <h2 className="text-base md:text-lg font-semibold text-gray-700 mb-4">Current Value</h2>
            <div className="text-3xl md:text-5xl font-bold text-gray-900 mb-2">
              {metricData.format(metricData.data.current)}
            </div>
            <div className={`text-base md:text-lg ${metricData.data.change >= 0 ? 'text-green-600' : 'text-red-600'}`}>
              {metricData.data.change >= 0 ? '+' : ''}{metricData.data.change}% from last period
            </div>
          </div>
        </div>

        {/* Chart */}
        <div className="bg-white rounded-lg shadow-sm p-6 md:p-8 border border-gray-200 mb-6 md:mb-8">
          <h2 className="text-base md:text-lg font-semibold text-gray-900 mb-6">Trend Analysis</h2>
          <div className="h-64 md:h-96">
            <ResponsiveContainer width="100%" height="100%">
              <LineChart data={metricData.data.data}>
                <CartesianGrid strokeDasharray="3 3" stroke="#f0f0f0" />
                <XAxis 
                  dataKey="date" 
                  axisLine={false}
                  tickLine={false}
                  tick={{ fontSize: 12, fill: '#6b7280' }}
                  tickFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}
                />
                <YAxis 
                  axisLine={false}
                  tickLine={false}
                  tick={{ fontSize: 12, fill: '#6b7280' }}
                  tickFormatter={metricData.format}
                />
                <Tooltip 
                  labelFormatter={(value) => new Date(value).toLocaleDateString()}
                  formatter={(value: number) => [metricData.format(value), metricData.title]}
                  contentStyle={{
                    backgroundColor: 'white',
                    border: '1px solid #e5e7eb',
                    borderRadius: '6px',
                  }}
                />
                <Line
                  type="monotone"
                  dataKey={metric === 'users' ? 'users' : metric === 'revenue' ? 'revenue' : 'engagement'}
                  stroke={metricData.color}
                  strokeWidth={3}
                  dot={{ fill: metricData.color, strokeWidth: 2, r: 4 }}
                  activeDot={{ r: 6, fill: metricData.color }}
                />
              </LineChart>
            </ResponsiveContainer>
          </div>
        </div>

        {/* Data Table */}
        <div className="bg-white rounded-lg shadow-sm p-6 md:p-8 border border-gray-200 mb-6 md:mb-8">
          <h2 className="text-base md:text-lg font-semibold text-gray-900 mb-6">Historical Data</h2>
          <div className="overflow-x-auto">
            <table className="w-full border-collapse">
              <thead>
                <tr className="border-b border-gray-200">
                  <th className="text-left py-3 px-4 font-semibold text-gray-900">Date</th>
                  <th className="text-right py-3 px-4 font-semibold text-gray-900">Value</th>
                </tr>
              </thead>
              <tbody>
                {metricData.data.data.map((item, index) => (
                  <tr key={index} className="border-b border-gray-100">
                    <td className="py-3 px-4 text-gray-700 text-sm md:text-base">
                      {new Date(item.date).toLocaleDateString()}
                    </td>
                    <td className="py-3 px-4 text-right font-medium text-gray-900 text-sm md:text-base">
                      {metricData.format(item[metric === 'users' ? 'users' : metric === 'revenue' ? 'revenue' : 'engagement'])}
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>

        {/* Print Button at Bottom */}
        <div className="flex justify-center no-print">
          <button
            onClick={handlePrint}
            className="flex items-center px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors shadow-md"
          >
            <Printer className="h-4 w-4 mr-2" />
            Print Report
          </button>
        </div>
      </div>
    </div>
  );
};

export default AnalyticsDetail;
